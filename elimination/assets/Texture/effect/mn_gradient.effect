CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        texture_first: { value: white }
        texture_second: { value: white }
        gradient_value: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D texture_first;
  uniform sampler2D texture_second;
  #endif

  uniform LAMYOUMG_COM {
    float gradient_value;
  };

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);
    vec4 o_first = vec4(1, 1, 1, 1);
    vec4 o_second = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      // CCTexture(texture, v_uv0, o);
      CCTexture(texture_first, v_uv0, o_first);
      CCTexture(texture_second, v_uv0, o_second);
    #endif

    // o *= v_color;
    o_first *= v_color;
    o_second *= v_color;

    // ALPHA_TEST(o);

    // gl_FragColor = o;
    gl_FragColor = o_first * (1.0 - gradient_value) + o_second * gradient_value;
  }
}%
