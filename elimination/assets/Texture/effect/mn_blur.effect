CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        # modified
        range: {
          value: 1,
          editor: {
            tooltip: "模糊程度"
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  // modified
  uniform RANGE{
    float range;
  };

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);
    vec4 o = vec4(0, 0, 0, 0);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    // 水平垂直方向
    vec2 base = vec2(0.01, 0.01);
    // 水平方向
    // vec2 base = vec2(0.01, 0)
    // // 垂直方向
    // vec2 base = vec2(0, 0.01);

    // * 1.0, * 0.5用于转换小数
    // 提高模糊精度，离中心像素越近精度越高
    o += texture(texture, v_uv0 + range * base * 1.0) * 0.15;
    o += texture(texture, v_uv0 + range * base * 0.5) * 0.2;
    o += texture(texture, v_uv0) * 0.3;
    o += texture(texture, v_uv0 - range * base * 0.5) * 0.2;
    o += texture(texture, v_uv0 - range * base * 1.0) * 0.15;

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
