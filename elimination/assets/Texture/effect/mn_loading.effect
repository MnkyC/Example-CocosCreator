CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global> // 引入cc_time

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  const float PI = 3.141592654;

  // 画圆
  // 通过length和step两个内置函数画圆
  // length(x), 返回向量的长度
  // step(edge, x), 通过比较edge和x返回对应的值(x<edge返回0.0，否则返回1.0)，缺点：有锯齿
  // smoothstep(edge0, edge1, x), 去掉锯齿
  // 通过x和edge0，edge1的比较返回对应的值(x<=edge0返回0.0，x>=edge1返回1.0，edge0<x<edge1返回平滑的值)
  float drawCircle(in vec2 uv, in float radius) {
    return 1.0 - smoothstep(radius - radius * 0.01, radius + radius * 0.01, length(uv));
  }

  void main () {
    // vec4 o = vec4(1, 1, 1, 1); // 默认白色
    vec4 o = vec4(0, 0, 0, 0);

    vec2 uv = v_uv0 - 0.5; // 一般将uv范围转成-0.5~0.5，这样图片的中心正好是(0, 0)
    // o.a = 1.0 - step(0.2, length(uv)); // 距离中心小于0.2的点的alpha值设为1.0
    // float radius = 0.2;
    // o.a = 1.0 - smoothstep(radius - radius * 0.01, radius + radius * 0.01, length(uv));

    // 画一圈的圆
    // 思路：移动圆，减去一个坐标就会往右下角移动，加上一个坐标就会往左上角移动
    // 将这个圈分成多份，每个圆对应一个角度，根据三角函数求出半径和角度的关系即可
    float R = 0.35;
    float radius = 0.05;
    const float count = 8.0;
    vec2 pos = vec2(0.0); // 圆的坐标
    float rotation = 0.0; // 弧度 PI对应180度

    float time = cc_time.x;

    for(float i = 0.0; i < count; i++) {
      // rotation = (i / count) * 2.0 * PI;
      rotation = (i / count) * 2.0 * PI + time * 2.0 * PI / 4.0; // 让圆转起来
      pos = vec2(R * cos(rotation), R * sin(rotation));
      // o.a += drawCircle(uv - pos, radius);
      // 增加颜色和大小的变化
      o.a += drawCircle(uv - pos, radius * (sin(rotation * 0.45) + 1.0) / 3.0 + radius / 3.0);
      o.r += o.a * (sin(i / count + time + PI * 6.0 / 3.0) + 1.0) / 2.0;
      o.g += o.a * (sin(i / count + time + PI * 4.0 / 3.0) + 1.0) / 2.0;
      o.b += o.a * (sin(i / count + time + PI * 2.0 / 3.0) + 1.0) / 2.0;
    }

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
